{"ast":null,"code":"var _jsxFileName = \"D:\\\\.MERN_Project\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from 'react';\nimport axios from 'axios';\n\n// create context for authentication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Create a provider Context\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    // Function to fetch the current user from the server\n    const fetchUser = async () => {\n      try {\n        const response = await axios.get('/user/current-user', {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        setUser(response.data);\n      } catch (error) {\n        console.error(\"Error fetching user:\", error);\n        setUser(null); // Reset user state on error\n      }\n    };\n    // Fetch user when component mounts\n    fetchUser();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","fetchUser","response","get","headers","localStorage","getItem","data","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/.MERN_Project/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\n\r\n// create context for authentication\r\nexport const AuthContext = createContext();\r\n\r\n// Create a provider Context\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        // Function to fetch the current user from the server\r\n        const fetchUser = async () => {\r\n            try {\r\n                const response = await axios.get('/user/current-user', {\r\n                    headers: {\r\n                      'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n                    } \r\n            });\r\n            setUser(response.data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching user:\", error);\r\n                setUser(null); // Reset user state on error\r\n            }\r\n        };\r\n        // Fetch user when component mounts\r\n        fetchUser();\r\n    },[]);\r\n    return (\r\n        <AuthContext.Provider value={{ user, setUser }}>\r\n          {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAI;IACV;IACA,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,oBAAoB,EAAE;UACnDC,OAAO,EAAE;YACP,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UAC1D;QACR,CAAC,CAAC;QACFN,OAAO,CAACE,QAAQ,CAACK,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CR,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;MACnB;IACJ,CAAC;IACD;IACAC,SAAS,CAAC,CAAC;EACf,CAAC,EAAC,EAAE,CAAC;EACL,oBACIP,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEZ,IAAI;MAAEC;IAAQ,CAAE;IAAAH,QAAA,EAC5CA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE/B,CAAC;AAAAjB,EAAA,CA1BYF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}