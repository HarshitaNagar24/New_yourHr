{"ast":null,"code":"import{createContext,useEffect,useState}from'react';import axios from'axios';// create context for authentication\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();// Create a provider Context\nexport const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);useEffect(()=>{// Function to fetch the current user from the server\nconst fetchUser=async()=>{try{const response=await axios.get('/user/current-user',{headers:{'Authorization':`Bearer ${localStorage.getItem('token')}`}});setUser(response.data);}catch(error){console.error(\"Error fetching user:\",error);setUser(null);// Reset user state on error\n}};// Fetch user when component mounts\nfetchUser();},[]);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,setUser},children:children});};","map":{"version":3,"names":["createContext","useEffect","useState","axios","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","fetchUser","response","get","headers","localStorage","getItem","data","error","console","Provider","value"],"sources":["D:/.MERN_Project/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\n\r\n// create context for authentication\r\nexport const AuthContext = createContext();\r\n\r\n// Create a provider Context\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        // Function to fetch the current user from the server\r\n        const fetchUser = async () => {\r\n            try {\r\n                const response = await axios.get('/user/current-user', {\r\n                    headers: {\r\n                      'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n                    } \r\n            });\r\n            setUser(response.data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching user:\", error);\r\n                setUser(null); // Reset user state on error\r\n            }\r\n        };\r\n        // Fetch user when component mounts\r\n        fetchUser();\r\n    },[]);\r\n    return (\r\n        <AuthContext.Provider value={{ user, setUser }}>\r\n          {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}"],"mappings":"AAAA,OAASA,aAAa,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC1D,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,MAAO,MAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAE1C;AACA,MAAO,MAAM,CAAAO,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACrC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAEtCD,SAAS,CAAC,IAAI,CACV;AACA,KAAM,CAAAW,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC1B,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAV,KAAK,CAACW,GAAG,CAAC,oBAAoB,CAAE,CACnDC,OAAO,CAAE,CACP,eAAe,CAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAC1D,CACR,CAAC,CAAC,CACFN,OAAO,CAACE,QAAQ,CAACK,IAAI,CAAC,CACtB,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5CR,OAAO,CAAC,IAAI,CAAC,CAAE;AACnB,CACJ,CAAC,CACD;AACAC,SAAS,CAAC,CAAC,CACf,CAAC,CAAC,EAAE,CAAC,CACL,mBACIP,IAAA,CAACC,WAAW,CAACe,QAAQ,EAACC,KAAK,CAAE,CAAEZ,IAAI,CAAEC,OAAQ,CAAE,CAAAF,QAAA,CAC5CA,QAAQ,CACW,CAAC,CAE/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}